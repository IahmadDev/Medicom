{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _binding = _interopRequireDefault(require(\"../binding\"));\n\nvar _helperSplitExportDeclaration = _interopRequireDefault(require(\"@babel/helper-split-export-declaration\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst renameVisitor = {\n  ReferencedIdentifier({\n    node\n  }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      path.skip();\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(path, state) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n\n};\n\nclass Renamer {\n  constructor(binding, oldName, newName) {\n    this.oldName = void 0;\n    this.newName = void 0;\n    this.binding = void 0;\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  maybeConvertFromExportDeclaration(parentDeclar) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\"declaration\").node.id) {\n      return;\n    }\n\n    (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path) {\n    return;\n    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    if (this.binding.kind !== \"hoisted\") return;\n    path.node.id = t.identifier(this.oldName);\n    path.node._blockHoist = 3;\n    path.replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));\n  }\n\n  maybeConvertFromClassFunctionExpression(path) {\n    return;\n    if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    if (this.binding.kind !== \"local\") return;\n    path.node.id = t.identifier(this.oldName);\n    this.binding.scope.parent.push({\n      id: t.identifier(this.newName)\n    });\n    path.replaceWith(t.assignmentExpression(\"=\", t.identifier(this.newName), path.node));\n  }\n\n  rename(block) {\n    const {\n      binding,\n      oldName,\n      newName\n    } = this;\n    const {\n      scope,\n      path\n    } = binding;\n    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());\n\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n\n      if (bindingIds[oldName] === binding.identifier) {\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    scope.traverse(block || scope.block, renameVisitor, this);\n\n    if (!block) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (binding.type === \"hoisted\") {}\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);\n      this.maybeConvertFromClassFunctionExpression(parentDeclar);\n    }\n  }\n\n}\n\nexports.default = Renamer;","map":{"version":3,"sources":["C:/Users/92320/Documents/5th Semester/SE/Medicom/frontend/node_modules/@babel/traverse/lib/scope/lib/renamer.js"],"names":["Object","defineProperty","exports","value","default","_binding","_interopRequireDefault","require","_helperSplitExportDeclaration","t","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","renameVisitor","ReferencedIdentifier","node","state","name","oldName","newName","Scope","path","scope","bindingIdentifierEquals","binding","identifier","skip","isVariableDeclaration","ids","getOuterBindingIdentifiers","Renamer","constructor","maybeConvertFromExportDeclaration","parentDeclar","maybeExportDeclar","parentPath","isExportDeclaration","isExportDefaultDeclaration","id","maybeConvertFromClassFunctionDeclaration","isFunctionDeclaration","isClassDeclaration","kind","_blockHoist","replaceWith","variableDeclaration","variableDeclarator","toExpression","maybeConvertFromClassFunctionExpression","isFunctionExpression","isClassExpression","parent","push","assignmentExpression","rename","block","find","isDeclaration","bindingIds","traverse","removeOwnBinding","bindings","type"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _binding = _interopRequireDefault(require(\"../binding\"));\r\n\r\nvar _helperSplitExportDeclaration = _interopRequireDefault(require(\"@babel/helper-split-export-declaration\"));\r\n\r\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\r\n\r\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nconst renameVisitor = {\r\n  ReferencedIdentifier({\r\n    node\r\n  }, state) {\r\n    if (node.name === state.oldName) {\r\n      node.name = state.newName;\r\n    }\r\n  },\r\n\r\n  Scope(path, state) {\r\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\r\n      path.skip();\r\n    }\r\n  },\r\n\r\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(path, state) {\r\n    if (path.isVariableDeclaration()) return;\r\n    const ids = path.getOuterBindingIdentifiers();\r\n\r\n    for (const name in ids) {\r\n      if (name === state.oldName) ids[name].name = state.newName;\r\n    }\r\n  }\r\n\r\n};\r\n\r\nclass Renamer {\r\n  constructor(binding, oldName, newName) {\r\n    this.oldName = void 0;\r\n    this.newName = void 0;\r\n    this.binding = void 0;\r\n    this.newName = newName;\r\n    this.oldName = oldName;\r\n    this.binding = binding;\r\n  }\r\n\r\n  maybeConvertFromExportDeclaration(parentDeclar) {\r\n    const maybeExportDeclar = parentDeclar.parentPath;\r\n\r\n    if (!maybeExportDeclar.isExportDeclaration()) {\r\n      return;\r\n    }\r\n\r\n    if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\"declaration\").node.id) {\r\n      return;\r\n    }\r\n\r\n    (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\r\n  }\r\n\r\n  maybeConvertFromClassFunctionDeclaration(path) {\r\n    return;\r\n    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\r\n    if (this.binding.kind !== \"hoisted\") return;\r\n    path.node.id = t.identifier(this.oldName);\r\n    path.node._blockHoist = 3;\r\n    path.replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));\r\n  }\r\n\r\n  maybeConvertFromClassFunctionExpression(path) {\r\n    return;\r\n    if (!path.isFunctionExpression() && !path.isClassExpression()) return;\r\n    if (this.binding.kind !== \"local\") return;\r\n    path.node.id = t.identifier(this.oldName);\r\n    this.binding.scope.parent.push({\r\n      id: t.identifier(this.newName)\r\n    });\r\n    path.replaceWith(t.assignmentExpression(\"=\", t.identifier(this.newName), path.node));\r\n  }\r\n\r\n  rename(block) {\r\n    const {\r\n      binding,\r\n      oldName,\r\n      newName\r\n    } = this;\r\n    const {\r\n      scope,\r\n      path\r\n    } = binding;\r\n    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());\r\n\r\n    if (parentDeclar) {\r\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\r\n\r\n      if (bindingIds[oldName] === binding.identifier) {\r\n        this.maybeConvertFromExportDeclaration(parentDeclar);\r\n      }\r\n    }\r\n\r\n    scope.traverse(block || scope.block, renameVisitor, this);\r\n\r\n    if (!block) {\r\n      scope.removeOwnBinding(oldName);\r\n      scope.bindings[newName] = binding;\r\n      this.binding.identifier.name = newName;\r\n    }\r\n\r\n    if (binding.type === \"hoisted\") {}\r\n\r\n    if (parentDeclar) {\r\n      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);\r\n      this.maybeConvertFromClassFunctionExpression(parentDeclar);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexports.default = Renamer;"]},"metadata":{},"sourceType":"script"}